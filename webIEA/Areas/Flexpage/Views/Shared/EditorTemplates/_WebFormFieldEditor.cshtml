@model Flexpage.Models.WebFormFieldModel

@{
    var cid = String.Format("fp_WebFormCollapseSection{0}Field{1}", Model.SectionIndex, Model.Index);
}

<li class="ui-state-default" data-index="@Model.Index" data-sectionindex="@Model.SectionIndex" @*draggable="true" ondragstart="fp_webFormFieldDrag(event, @Model.Index)"*@>
    @Html.HiddenFor(m => m.ID)
    @Html.HiddenFor(m => m.Index)
    @Html.HiddenFor(m => m.SectionIndex)
    @Html.HiddenFor(m => m.ReadOnly)
    <div class="row">
        <div class="col-md-5">
            @*<div style="width: 100%; height: 8px; background-color: #FFFFFF; margin-bottom: 4px" ondrop="fp_webFormFieldsDrop(event, '@Model.Index', '@Model.SectionIndex')" ondragenter="fp_webFormItemDropAreaEnter(this)" ondragleave="fp_webFormItemDropAreaLeave(this)"></div>*@
            <div class="panel-group" style="margin-bottom: 4px">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="@(Model.HasErrors  ? "block-error" : "panel-title")">
                            <a data-toggle="collapse" href="#@cid" class="align-box">@Model.Name<span class="pull-right"><i class="fas fa-chevron-down rotate"></i></span></a>
                        </h4>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-1 form-trash"></div>
        @*<div class="col-md-12 folder-content-hidden-title">
                System
            </div>*@
        <div class="col-sm-2 form-mandatory" style="margin-top: 14px">
            <div class="folder-content-hidden-title">
                System
            </div>
            @if (Model.ReadOnly)
            {
                @Html.HiddenFor(m => m.IsSystem)
                @Html.CheckBoxFor(m => m.IsSystem, new { @disabled = "", @class = "custom-control-input" })
            }
            else
            {
                @Html.CheckBoxFor(m => m.IsSystem, new { @class = "custom-control-input" })
            }
        </div>
        @*<div class="col-md-12 folder-content-hidden-title">
                Hidden
            </div>
            <div class="col-md-1 form-mandatory" style="margin-top: 14px">
                @if (Model.ReadOnly)
                {
                    @Html.HiddenFor(m => m.IsHidden)
                    @Html.CheckBoxFor(m => m.IsHidden, new { @disabled = "", @class = "custom-control-input" })
                }
                else
                {
                    @Html.CheckBoxFor(m => m.IsHidden, new { @class = "custom-control-input" })
                }
            </div>*@
        @*<div class="col-md-12 folder-content-hidden-title">
                Encrypted
            </div>*@
        <div class="col-sm-2 form-mandatory" style="margin-top: 14px">
            <div class="folder-content-hidden-title">
                Encrypted
            </div>
            @if (Model.ReadOnly)
            {
                @Html.HiddenFor(m => m.IsEncrypted)
                @Html.CheckBoxFor(m => m.IsEncrypted, new { @disabled = "disabled", @class = "custom-control-input" })
            }
            else
            {
                @Html.CheckBoxFor(m => m.IsEncrypted, new { @class = "custom-control-input" })
            }
        </div>
        @*<div class="col-md-12 folder-content-hidden-title">
                @Resources.Strings.Forms_Mandatory
            </div>*@
        <div class="col-sm-2 form-mandatory" style="margin-top: 14px">
            <div class="folder-content-hidden-title">
                @Resources.Strings.Forms_Mandatory
            </div>
            @if (Model.ReadOnly)
            {
                @Html.HiddenFor(m => m.IsMandatory)
                @Html.CheckBoxFor(m => m.IsMandatory, new { @disabled = "", @class = "custom-control-input" })
            }
            else
            {
                @Html.CheckBoxFor(m => m.IsMandatory, new { @class = "custom-control-input" })
            }
        </div>
        <div id="@cid" class="col-md-12 panel-collapse collapse collapse-field-container">
            <div class="row" style="margin-bottom: 6px">
                <div class="col-md-2 fp_label" style="clear: both;">
                    Name
                </div>
                <div class="col-md-4">
                    @if (Model.ReadOnly)
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @readonly = Model.ReadOnly ? "readonly" : "" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control webform-fieldname", @onchange = "fp_webFormFieldNameChanged(this);" })
                    }
                </div>
                <div class="col-md-2 fp_label">
                    Title
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(m => m.Title, "LocalizedString")
                </div>
            </div>
            <div class="row">
                <div class="col-md-2 fp_label">
                    Description
                </div>
                <div class="col-md-4">
                    @Html.EditorFor(m => m.Description, "LocalizedString")
                </div>

                <div class="col-md-2 fp_label">
                    Type
                </div>
                <div class="col-md-4">
                    @if (Model.ReadOnly)
                    {
                        @Html.DropDownListFor(m => m.TypeID, Model.FieldTypes.Select(e => new SelectListItem() { Text = e.Name, Value = e.ID.ToString() }), new { @class = "form-control", @onchange = string.Format("fp_webFormFieldTypeChanged('{0}', this)", Model.TypeName), @readonly = Model.ReadOnly ? "readonly" : "", @disabled = Model.ReadOnly ? "disabled" : "" })
                        @Html.HiddenFor(m => m.TypeID)
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.TypeID, Model.FieldTypes.Select(e => new SelectListItem() { Text = e.Name, Value = e.ID.ToString() }), new { @class = "form-control webform-fieldtype", @onchange = string.Format("fp_webFormFieldTypeChanged('{0}', this)", Model.TypeName) })
                    }
                </div>
            </div>
            <div class="row" style="margin-top: 8px">
                <div class="col-md-3 fp_label">
                    Default value
                </div>
                <div class="col-md-9">
                    @if (Model.ReadOnly)
                    {
                        @Html.TextBoxFor(m => m.Default, new { @class = "form-control", @readonly = Model.ReadOnly ? "readonly" : "" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.Default, new { @class = "form-control" })
                    }
                </div>
            </div>
            @if (Model.TypeName == "enum")
            {
                <div class="row" style="margin-top: 8px">
                    <div class="col-md-2 fp_label">
                        Enums
                    </div>
                    <div class="col-md-9">
                        @if (Model.ReadOnly)
                        {
                            @*@Html.DropDownListFor(m => m.EnumID, Model.Enums.Select(e => new SelectListItem() { Text = e.Name, Value = e.ID.ToString() }), new { @class = "form-control", @onchange = string.Format("fp_webFormFieldEnumChanged('{0}', this)", @Model.EnumName), @readonly = Model.ReadOnly ? "readonly" : "", @disabled = Model.ReadOnly ? "disabled" : "" })*@
                            @Html.DropDownListFor(m => m.EnumID, Model.Enums.Select(e => new SelectListItem() { Text = e.Name, Value = e.ID.ToString() }), new { @class = "form-control", @readonly = Model.ReadOnly ? "readonly" : "", @disabled = Model.ReadOnly ? "disabled" : "" })
                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.EnumID, Model.Enums.Select(e => new SelectListItem() { Text = e.Name, Value = e.ID.ToString() }), new { @class = "form-control" })
                        }
                    </div>

                    <div class="col-md-1" style="padding: 0">
                        <input type="button" value="..." onclick="fp_popupControlOpen({ command:'edit', blockType: 'EnumList', allowSave: 0 },function(){fp_PostAjaxForm('#fp_FormBlockEditorContainer', { command: 'fieldenumchanged' })})" />
                    </div>
                </div>
                @* if (Model.EnumValues != null)
                    {
                        var ceveid = String.Format("webFormField{0}CurrentEnumValueEditor", Model.ID);
                        <div class="row" style="margin-top: 8px">
                            <div class="col-md-12">
                                <div style="display: flex; flex-flow: row nowrap">
                                    <div class="fp_label" style="flex: 0 0 auto">
                                        Values
                                    </div>
                                    <div style="flex: 1 1 auto">
                                        @Html.DropDownListFor(m => m.CurrentEnumValueID, Model.EnumValues.Select(e => new SelectListItem() { Text = e.Value, Value = e.Key.ToString() }), new { @class = "form-control", @style = "width: 100%", @onchange = string.Format("fp_webFormEnumValueSelected(this, '{0}')", ceveid) })
                                    </div>
                                    <div style="flex: 0 0 96px">
                                        <input type="button" value="Add" style="width: 100%" />
                                    </div>
                                    <div style="flex: 0 0 96px">
                                        <input type="button" value="Remove" style="width: 100%" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="margin-top: 8px">
                            <div class="col-md-12">
                                <div style="display: flex; flex-flow: row nowrap">

                                    <div class="fp_label" style="flex: 0 0 auto">
                                        Current
                                    </div>
                                    <div style="flex: 1 1 auto">
                                        @Html.TextBoxFor(m => m.CurrentEnumValue, new { @class = "form-control", @id = ceveid, @style = "width: 100%" })
                                    </div>
                                    <div style="flex: 0 0 96px">
                                        <input type="button" value="Apply" style="width: 100%" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    } *@

            }
        </div>
    </div>
</li>
