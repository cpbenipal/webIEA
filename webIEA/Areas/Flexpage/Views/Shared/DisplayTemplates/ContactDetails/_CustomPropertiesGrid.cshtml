@using System.Web.UI.WebControls
@using Newtonsoft.Json;

@model Pluritech.Properties.Abstract.DTO.CustomPropertyModel
@{ 
    var grid = Html.DevExpress().GridView(settings =>
    {

        settings.CallbackRouteValues = new
        {
            Controller = "ContactProperties",
            Action = "ContactDetails_CustomPropertyUpdate",
            contactID = Model.ObjectID,
            allowEdit = Model.AllowEdit,
            linkedBlockID = Model.LinkedBlockID
        };
        settings.Name = "сontactDetailsCustomProperties" + Model.ObjectID;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.KeyFieldName = "ID";


        settings.Columns.Add(n =>
        {
            n.FieldName = "Title";
            n.Caption = "Property";
        });


        settings.Columns.Add(n =>
        {
            n.Caption = "Value";
            n.SetDataItemTemplateContent(container =>
            {
                Pluritech.Properties.Abstract.DTO.CustomPropertyInfo data = ((List<Pluritech.Properties.Abstract.DTO.CustomPropertyInfo>)container.Grid.DataSource)
                .FirstOrDefault(s => s.ID.ToString() == container.KeyValue.ToString());


                if (data!=null&&data.Name == "PublishingFolder")
                {
                    Html.DevExpress().Button(settingsBtn =>
                    {
                        settingsBtn.Name = "btn" + container.KeyValue;
                        settingsBtn.Text = "Edit...";
                        settingsBtn.ClientSideEvents.Click = "function(s, e) {EditCustomProperty.showDialog('"+ data.Name + "','"+ data.ID+ "');}";
                    }).Render();
                }
                else if(data != null)
                {
                    if (data.DisplayValue!=null&&data.DisplayValue.Contains("Localizations")) {
                        dynamic stuff = JsonConvert.DeserializeObject(data.DisplayValue);
                        ViewContext.Writer.Write(!string.IsNullOrWhiteSpace(Model.LangCode)?stuff.Localizations[Model.LangCode]:stuff.Localizations["en"]);
                    }
                    else
                    {
                        ViewContext.Writer.Write(data.DisplayValue);
                    }

                }
            });
        });

        settings.SetDataItemTemplateContent(c =>
        {
            var id = (int)c.Grid.GetRowValues(c.VisibleIndex, "ID");

            ViewContext.Writer.Write("<div class='property-values property-value"+c.VisibleIndex+"' data-field='" + c.Column.FieldName + "' data-idProp='" + id + "' data-objectId='" + Model.ObjectID + "'>" + c.Text + "</div>");
        });

        if (Model.AllowEdit&& ((bool?)ViewBag.isAdmin == true || (bool?)ViewBag.IsContactsAdmin == true))
        {
            settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "ContactProperties", Action = "ContactDetails_CustomPropertyAdd", contactID = Model.ObjectID
                , allowEdit = Model.AllowEdit, linkedBlockID = Model.LinkedBlockID };
            settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "ContactProperties", Action = "ContactDetails_CustomPropertyEdit", contactID = Model.ObjectID
                , allowEdit = Model.AllowEdit, linkedBlockID = Model.LinkedBlockID };
            settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "ContactProperties", Action = "ContactDetails_CustomPropertyDelete", contactID = Model.ObjectID
                , allowEdit = Model.AllowEdit, linkedBlockID = Model.LinkedBlockID };

            settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
            settings.SettingsBehavior.ConfirmDelete = true;

            settings.CommandColumn.ShowNewButton = true;
            settings.CommandColumn.ShowEditButton = true;
            settings.CommandColumn.ShowDeleteButton = false;
            settings.CommandColumn.Visible = true;
            settings.EditFormLayoutProperties.ColCount = 2;
            settings.EditFormLayoutProperties.Items.Add("Property");
            settings.EditFormLayoutProperties.Items.Add("Value");
            settings.EditFormLayoutProperties.Items.AddCommandItem(itemSettings =>
            {
                itemSettings.HorizontalAlign = FormLayoutHorizontalAlign.Right;
            });

            settings.CommandColumn.ButtonRenderMode = GridCommandButtonRenderMode.Image;
            settings.SettingsCommandButton.EditButton.Image.IconID = IconID.EditEdit16x16office2013;
            settings.SettingsCommandButton.DeleteButton.Image.IconID = IconID.EditDelete16x16office2013;
            settings.SettingsCommandButton.NewButton.Image.IconID = IconID.ActionsAdd16x16;
            settings.SettingsCommandButton.CancelButton.Image.IconID = IconID.ActionsCancel16x16office2013;
            settings.SettingsCommandButton.UpdateButton.Image.IconID = IconID.SaveSave16x16office2013;

        }

        if(Model.LinkedBlockID != null)
        {
            settings.ClientSideEvents.EndCallback = "fp_changeCustomProperties" + Model.LinkedBlockID.ToString();
        }
        var bDelete = new GridViewCommandColumnCustomButton()
        {
            ID = "bDelete",
            Text = "Delete",
        };

        bDelete.Image.IconID = IconID.EditDelete16x16office2013;
        settings.ClientSideEvents.CustomButtonClick = "function(s, e){  if (e.buttonID == 'bDelete') deleteRowInDevexpressGrid(сontactDetailsCustomProperties" + Model.ObjectID + ", e.visibleIndex); }";
        settings.CommandColumn.CustomButtons.Add(bDelete);
        settings.Width = Unit.Percentage(100);

        settings.SetEditFormTemplateContent(c =>
        {
            Html.RenderPartial("~/Areas/Flexpage/Views/Shared/DisplayTemplates/ContactDetails/_CustomPropertiesEditTemplate.cshtml"
                , (c != null && c.KeyValue != null) ? c.Grid.GetRow(((DevExpress.Web.Data.WebDataRow)c.DataItem).VisibleIndex)
                    : new Pluritech.Properties.Abstract.DTO.CustomPropertyInfo()
                , new ViewDataDictionary {
                    { "AllowedProperties", Model.AllowedProperties },
                    { "langCode", Model.LangCode },
                    { "ModelID", Model.ObjectID }
                });
        });

        settings.ClientSideEvents.ContextMenu = "function(s,e){ EditCustomProperty.contextMenu(s,e); }";
        if (((bool?)ViewBag.isAdmin == true || (bool?)ViewBag.IsContactsAdmin == true )&& (bool?)Model.AllowEdit==true)
        {
            settings.ClientSideEvents.Init = "function(s,e) { s.PerformCallback(); }";
        }
        settings.ClientSideEvents.SelectionChanged = "function(s, e) { EditCustomProperty.OnSelectionChanged(s,e,"+Model.ObjectID+") }";
        settings.SettingsBehavior.AllowDragDrop = false;
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model.Properties).GetHtml()
